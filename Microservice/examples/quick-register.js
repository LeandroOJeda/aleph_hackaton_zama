import { ethers } from "ethers";
import { createRequire } from 'module';
const require = createRequire(import.meta.url);

// Cargar el ABI del contrato directamente
const contractArtifact = require('../artifacts/contracts/TransactionRegistry.sol/TransactionRegistry.json');

// Configuraci√≥n
const CONTRACT_ADDRESS = "0x5FbDB2315678afecb367f032d93F642f64180aa3";
const RPC_URL = "http://127.0.0.1:8545";

/**
 * Funci√≥n r√°pida para registrar una transacci√≥n
 * @param {string} descripcion - Descripci√≥n del transporte
 * @param {number} kilometros - Distancia en kil√≥metros
 * @param {string} empresaOrigen - Empresa que env√≠a
 * @param {string} empresaDestino - Empresa que recibe
 */
export async function registrarTransaccion(descripcion, kilometros, empresaOrigen, empresaDestino) {
  try {
    // Validaciones b√°sicas
    if (!descripcion || descripcion.trim() === "") {
      throw new Error("La descripci√≥n no puede estar vac√≠a");
    }
    if (!kilometros || kilometros <= 0) {
      throw new Error("Los kil√≥metros deben ser mayor a 0");
    }
    if (!empresaOrigen || !empresaDestino) {
      throw new Error("Debe especificar empresa origen y destino");
    }

    console.log("üöÄ Registrando transacci√≥n...");
    
    // Conectar a la blockchain
    const provider = new ethers.JsonRpcProvider(RPC_URL);
    const signer = await provider.getSigner(0);
    
    // Usar el ABI del contrato cargado
    const contract = new ethers.Contract(CONTRACT_ADDRESS, contractArtifact.abi, signer);
    
    // Enviar transacci√≥n
    const tx = await contract.createTransaction(
      descripcion,
      kilometros,
      empresaOrigen,
      empresaDestino
    );
    
    console.log("‚è≥ Esperando confirmaci√≥n...");
    const receipt = await tx.wait();
    
    // Obtener ID de la transacci√≥n
    const event = receipt.logs.find(log => {
      try {
        const parsed = contract.interface.parseLog(log);
        return parsed.name === "TransactionCreated";
      } catch {
        return false;
      }
    });
    
    if (event) {
      const parsedEvent = contract.interface.parseLog(event);
      const transactionId = parsedEvent.args[0];
      
      console.log("‚úÖ ¬°Transacci√≥n registrada exitosamente!");
      console.log("üÜî ID:", transactionId.toString());
      console.log("üìã Hash:", tx.hash);
      console.log("üß± Bloque:", receipt.blockNumber);
      
      return {
        success: true,
        transactionId: transactionId.toString(),
        hash: tx.hash,
        blockNumber: receipt.blockNumber
      };
    }
    
  } catch (error) {
    console.error("‚ùå Error:", error.message);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * Funci√≥n para consultar una transacci√≥n espec√≠fica
 * @param {number} transactionId - ID de la transacci√≥n
 */
export async function consultarTransaccion(transactionId) {
  try {
    const provider = new ethers.JsonRpcProvider(RPC_URL);
    const signer = await provider.getSigner(0);
    
    // Usar el ABI del contrato cargado
    const contract = new ethers.Contract(CONTRACT_ADDRESS, contractArtifact.abi, signer);
    
    const exists = await contract.transactionExists(transactionId);
    if (!exists) {
      throw new Error(`La transacci√≥n ${transactionId} no existe`);
    }
    
    const tx = await contract.getTransaction(transactionId);
    
    const result = {
      id: tx[0].toString(),
      descripcion: tx[1],
      kilometros: tx[2].toString(),
      empresaOrigen: tx[3],
      empresaDestino: tx[4],
      creadoPor: tx[5],
      fecha: new Date(Number(tx[6]) * 1000).toLocaleString()
    };
    
    console.log("üìã Transacci√≥n encontrada:");
    console.log("üÜî ID:", result.id);
    console.log("üìù Descripci√≥n:", result.descripcion);
    console.log("üìè Kil√≥metros:", result.kilometros);
    console.log("üè¢ De:", result.empresaOrigen);
    console.log("üè¢ Para:", result.empresaDestino);
    console.log("üë§ Creado por:", result.creadoPor);
    console.log("üìÖ Fecha:", result.fecha);
    
    return result;
    
  } catch (error) {
    console.error("‚ùå Error:", error.message);
    return null;
  }
}

/**
 * Funci√≥n para obtener el total de transacciones
 */
export async function obtenerTotalTransacciones() {
  try {
    const provider = new ethers.JsonRpcProvider(RPC_URL);
    const signer = await provider.getSigner(0);
    
    // Usar el ABI del contrato cargado
    const contract = new ethers.Contract(CONTRACT_ADDRESS, contractArtifact.abi, signer);
    
    const total = await contract.getTransactionCount();
    console.log("üìä Total de transacciones:", total.toString());
    
    return Number(total);
    
  } catch (error) {
    console.error("‚ùå Error:", error.message);
    return 0;
  }
}

// Ejemplos de uso si se ejecuta directamente
if (import.meta.url === `file://${process.argv[1]}`) {
  console.log("üåü === EJEMPLOS DE USO ===");
  
  // Ejemplo 1: Registrar una transacci√≥n
  console.log("\n1Ô∏è‚É£ Registrando transacci√≥n de ejemplo...");
  await registrarTransaccion(
    "Env√≠o de productos electr√≥nicos",
    450,
    "TechCorp Madrid",
    "ElectroStore Valencia"
  );
  
  // Ejemplo 2: Consultar total
  console.log("\n2Ô∏è‚É£ Consultando total de transacciones...");
  const total = await obtenerTotalTransacciones();
  
  // Ejemplo 3: Consultar la √∫ltima transacci√≥n
  if (total > 0) {
    console.log("\n3Ô∏è‚É£ Consultando √∫ltima transacci√≥n...");
    await consultarTransaccion(total);
  }
}