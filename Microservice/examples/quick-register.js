import { ethers } from "ethers";
import { createRequire } from 'module';
const require = createRequire(import.meta.url);

// Cargar el ABI del contrato VehicleInfoRegistry
const contractArtifact = require('../artifacts/contracts/TransactionRegistry.sol/VehicleInfoRegistry.json');

// Configuraci√≥n
const CONTRACT_ADDRESS = "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0";
const RPC_URL = "http://127.0.0.1:8545";

/**
 * Funci√≥n r√°pida para registrar informaci√≥n vehicular
 * @param {string} vehicleId - ID del veh√≠culo
 * @param {number} kilometros - Kilometraje actual
 * @param {string} detalles - Detalles del registro
 * @param {string} origen - Origen del registro (taller, concesionario, etc.)
 */
export async function registrarInfoVehicular(vehicleId, kilometros, detalles, origen) {
  try {
    // Validaciones b√°sicas
    if (!vehicleId || vehicleId.trim() === "") {
      throw new Error("El ID del veh√≠culo no puede estar vac√≠o");
    }
    if (!kilometros || kilometros <= 0) {
      throw new Error("Los kil√≥metros deben ser mayor a 0");
    }
    if (!detalles || detalles.trim() === "") {
      throw new Error("Los detalles no pueden estar vac√≠os");
    }
    if (!origen || origen.trim() === "") {
      throw new Error("El origen no puede estar vac√≠o");
    }

    console.log("üöÄ Registrando informaci√≥n vehicular...");
    
    // Conectar a la blockchain
    const provider = new ethers.JsonRpcProvider(RPC_URL);
    const signer = await provider.getSigner(0);
    
    // Usar el ABI del contrato cargado
    const contract = new ethers.Contract(CONTRACT_ADDRESS, contractArtifact.abi, signer);
    
    // Enviar transacci√≥n
    const tx = await contract.createInfoBlock(
      vehicleId,
      kilometros,
      detalles,
      origen
    );
    
    console.log("‚è≥ Esperando confirmaci√≥n...");
    const receipt = await tx.wait();
    
    // Obtener ID del bloque de informaci√≥n
    const event = receipt.logs.find(log => {
      try {
        const parsed = contract.interface.parseLog(log);
        return parsed.name === "InfoBlockCreated";
      } catch {
        return false;
      }
    });
    
    if (event) {
      const parsedEvent = contract.interface.parseLog(event);
      const blockId = parsedEvent.args[0];
      const vehicleId = parsedEvent.args[1];
      
      console.log("‚úÖ ¬°Informaci√≥n vehicular registrada exitosamente!");
      console.log("üÜî ID del bloque:", blockId.toString());
      console.log("üöó Veh√≠culo:", vehicleId);
      console.log("üìã Hash:", tx.hash);
      console.log("üß± Bloque:", receipt.blockNumber);
      
      return {
        success: true,
        blockId: blockId.toString(),
        vehicleId: vehicleId,
        hash: tx.hash,
        blockNumber: receipt.blockNumber
      };
    }
    
  } catch (error) {
    console.error("‚ùå Error:", error.message);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * Funci√≥n para consultar informaci√≥n vehicular espec√≠fica
 * @param {string} vehicleId - ID del veh√≠culo a consultar
 */
export async function consultarInfoVehicular(vehicleId) {
  try {
    console.log(`üîç Consultando informaci√≥n del veh√≠culo ${vehicleId}...`);
    
    const provider = new ethers.JsonRpcProvider(RPC_URL);
    const contract = new ethers.Contract(CONTRACT_ADDRESS, contractArtifact.abi, provider);
    
    // Obtener datos del veh√≠culo
    const vehicleInfo = await contract.getVehicleInfo(vehicleId);
    
    console.log("üìã Informaci√≥n del veh√≠culo:");
    console.log("üöó ID del veh√≠culo:", vehicleId);
    console.log("üìè Kil√≥metros:", vehicleInfo.kilometers.toString());
    console.log("üìù Detalles:", vehicleInfo.details);
    console.log("üè¢ Origen:", vehicleInfo.origin);
    console.log("‚úÖ Activo:", vehicleInfo.isActive);
    console.log("üîß VTV v√°lida:", vehicleInfo.hasValidVTV);
    console.log("‚è∞ √öltima actualizaci√≥n:", new Date(Number(vehicleInfo.lastUpdate) * 1000).toLocaleString());
    
    return {
      vehicleId: vehicleId,
      kilometers: vehicleInfo.kilometers.toString(),
      details: vehicleInfo.details,
      origin: vehicleInfo.origin,
      isActive: vehicleInfo.isActive,
      hasValidVTV: vehicleInfo.hasValidVTV,
      lastUpdate: Number(vehicleInfo.lastUpdate)
    };
  } catch (error) {
    console.error("‚ùå Error al consultar informaci√≥n vehicular:", error.message);
    throw error;
  }
}

/**
 * Funci√≥n para obtener el total de bloques de informaci√≥n
 */
export async function obtenerTotalBloques() {
  try {
    console.log("üìä Obteniendo total de bloques de informaci√≥n...");
    
    const provider = new ethers.JsonRpcProvider(RPC_URL);
    const contract = new ethers.Contract(CONTRACT_ADDRESS, contractArtifact.abi, provider);
    
    const total = await contract.getTotalInfoBlocks();
    
    console.log("üìà Total de bloques de informaci√≥n:", total.toString());
    
    return Number(total);
  } catch (error) {
    console.error("‚ùå Error al obtener total:", error.message);
    throw error;
  }
}

// Ejemplo de uso
if (import.meta.url === `file://${process.argv[1]}`) {
  (async () => {
    try {
      console.log("üöÄ Iniciando ejemplo de registro vehicular...");
      
      // Registrar informaci√≥n vehicular
      const resultado = await registrarInfoVehicular(
        "ABC123",
        45000,
        "Mantenimiento preventivo realizado",
        "Taller Oficial Honda"
      );
      
      if (resultado.success) {
        console.log("\n‚è≥ Esperando 2 segundos antes de consultar...");
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Consultar la informaci√≥n vehicular reci√©n creada
        await consultarInfoVehicular(resultado.vehicleId);
        
        // Obtener total de bloques de informaci√≥n
        await obtenerTotalBloques();
      }
      
    } catch (error) {
      console.error("üí• Error en el ejemplo:", error.message);
    }
  })();
}